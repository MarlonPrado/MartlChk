<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Martlet CHK</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <style>
        /* Fondos responsivos */
        body {
            background-image: url('https://c4.wallpaperflare.com/wallpaper/174/206/472/thorfinn-vinland-saga-hd-wallpaper-preview.jpg');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            min-height: 100vh;
        }

        @media (max-width: 768px) {
            body {
                background-image: url('https://images.unsplash.com/photo-1639762681297-068b47a9e5aa?q=80&w=2232&auto=format&fit=crop');
            }
        }

        /* Overlay inicial */
        #modeSelectorOverlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 9999;
            transition: all 0.5s ease;
        }

        #modeSelectorOverlay h1 {
            color: white;
            margin-bottom: 2rem;
            text-align: center;
            font-size: 2.5rem;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
        }

        .mode-selector-btn {
            width: 200px;
            height: 60px;
            margin: 10px;
            font-size: 1.2rem;
            transition: all 0.3s ease;
        }

        .mode-selector-btn:hover {
            transform: scale(1.05);
        }

        /* Contenido principal (inicialmente oculto) */
        #mainContent {
            opacity: 0;
            transition: opacity 0.5s ease;
        }

        .card {
            background-color: rgba(0, 0, 0, 0.85) !important;
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .card-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .disabled-field {
            background-color: #2a2a2a !important;
            color: #6c757d !important;
            border-color: #444 !important;
            cursor: not-allowed;
        }

        .disabled-field::placeholder {
            color: #6c757d !important;
            opacity: 0.7;
        }

        .pulsate {
            animation: pulsate 1.5s infinite;
        }

        @keyframes pulsate {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Mejoras de diseño */
        .form-control, .form-control:focus {
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            border-color: #495057;
        }

        .nav-tabs .nav-link {
            color: #6c757d;
        }

        .nav-tabs .nav-link.active {
            color: white;
            font-weight: bold;
        }

        .progress {
            background-color: rgba(255, 255, 255, 0.1);
        }

        /* Efecto hover para botones */
        .btn-outline-primary:hover, .btn-outline-info:hover, 
        .btn-outline-danger:hover, .btn-outline-light:hover {
            color: white !important;
        }

        /* Nuevos estilos para resultados */
        .approved-card {
            border-left: 4px solid #28a745 !important;
            background-color: rgba(40, 167, 69, 0.1) !important;
        }

        .declined-card {
            border-left: 4px solid #dc3545 !important;
            background-color: rgba(220, 53, 69, 0.1) !important;
        }

        .error-card {
            border-left: 4px solid #ffc107 !important;
            background-color: rgba(255, 193, 7, 0.1) !important;
        }

        .approved-badge {
            background-color: #28a745 !important;
        }

        .declined-badge {
            background-color: #dc3545 !important;
        }

        .error-badge {
            background-color: #ffc107 !important;
            color: #212529 !important;
        }

        .copy-btn {
            padding: 0.15rem 0.3rem;
            font-size: 0.75rem;
            margin-left: 0.5rem;
        }
    </style>
</head>
<body class="bg-dark text-light">
    <!-- Overlay de selección de modo -->
    <div id="modeSelectorOverlay">
        <h1 class="animate__animated animate__fadeIn">Selecciona tu modo de operación</h1>
        <div class="d-flex flex-wrap justify-content-center animate__animated animate__fadeInUp">
            <button class="btn btn-outline-primary mode-selector-btn" data-mode="1">
                <i class="bi bi-1-circle"></i> Normal (1 Cookie)
            </button>
            <button class="btn btn-outline-info mode-selector-btn" data-mode="2">
                <i class="bi bi-2-circle"></i> Medio (2 Cookies)
            </button>
            <button class="btn btn-outline-danger mode-selector-btn" data-mode="3">
                <i class="bi bi-3-circle"></i> Extremo (4 Cookies)
            </button>
        </div>
    </div>

    <!-- Contenido principal (inicialmente oculto) -->
    <div id="mainContent" class="container-fluid py-3">
        <div class="row">
            <!-- Panel de Control -->
            <div class="col-lg-4">
                <div class="card bg-dark border-secondary mb-3">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">Panel de Control</h5>
                    </div>
                    <div class="card-body">
                        <form id="checkForm">
                            <!-- Modo de operación -->
                            <div class="mb-3">
                                <label class="form-label fw-bold text-light">Modo de Operación</label>
                                <div class="d-flex flex-wrap gap-2">
                                    <input type="radio" class="btn-check" name="opMode" id="mode1" value="1">
                                    <label class="btn btn-outline-primary" for="mode1">Normal</label>

                                    <input type="radio" class="btn-check" name="opMode" id="mode2" value="2">
                                    <label class="btn btn-outline-info" for="mode2">Medio</label>

                                    <input type="radio" class="btn-check" name="opMode" id="mode3" value="3">
                                    <label class="btn btn-outline-danger" for="mode3">Extremo</label>
                                </div>
                            </div>

                            <!-- Cookies -->
                            <div class="mb-3">
                                <label class="form-label fw-bold text-light">Cookie 1 (Requerida)</label>
                                <input type="text" class="form-control bg-dark text-light border-secondary" id="cookie1" placeholder="Ingrese cookie 1" required>
                            </div>

                            <div class="mb-3 cookie-field" data-min-mode="2" style="display: none;">
                                <label class="form-label fw-bold text-light">Cookie 2 (Modo Medio+)</label>
                                <input type="text" class="form-control bg-dark text-light border-secondary" id="cookie2" placeholder="Ingrese cookie 2">
                            </div>

                            <div class="mb-3 cookie-field" data-min-mode="3" style="display: none;">
                                <label class="form-label fw-bold text-light">Cookie 3 (Modo Extremo)</label>
                                <input type="text" class="form-control bg-dark text-light border-secondary" id="cookie3" placeholder="Ingrese cookie 3">
                            </div>

                            <div class="mb-3 cookie-field" data-min-mode="3" style="display: none;">
                                <label class="form-label fw-bold text-light">Cookie 4 (Modo Extremo)</label>
                                <input type="text" class="form-control bg-dark text-light border-secondary" id="cookie4" placeholder="Ingrese cookie 4">
                            </div>

                            <!-- Tarjetas -->
                            <div class="mb-3">
                                <label class="form-label fw-bold text-light">Tarjetas (1 por línea)</label>
                                <textarea class="form-control bg-dark text-light border-secondary" id="cardList" rows="5" placeholder="Ingrese tarjetas, una por línea" required></textarea>
                                <div class="form-text text-light" id="cardCount">0 tarjetas ingresadas (0 únicas)</div>
                            </div>

                            <!-- Botones -->
                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-success" id="checkBtn">
                                    <i class="bi bi-credit-card"></i> Verificar Tarjetas
                                </button>
                                <button type="button" class="btn btn-secondary" id="clearBtn">
                                    <i class="bi bi-trash"></i> Limpiar
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Resultados -->
            <div class="col-lg-8">
                <!-- Estadísticas -->
                <div class="card bg-dark border-secondary mb-3">
                    <div class="card-header bg-secondary text-white">
                        <h5 class="mb-0">Estadísticas</h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-6 col-md-3">
                                <div class="card bg-dark text-white mb-2">
                                    <div class="card-body py-2">
                                        <h5 class="card-title mb-0">Total</h5>
                                        <p class="display-6 mb-0" id="statsTotal">0</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="card bg-dark text-success mb-2">
                                    <div class="card-body py-2">
                                        <h5 class="card-title mb-0">Aprovadas</h5>
                                        <p class="display-6 mb-0" id="statsApproved">0</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="card bg-dark text-danger mb-2">
                                    <div class="card-body py-2">
                                        <h5 class="card-title mb-0">Reprovadas</h5>
                                        <p class="display-6 mb-0" id="statsDenied">0</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6 col-md-3">
                                <div class="card bg-dark text-warning mb-2">
                                    <div class="card-body py-2">
                                        <h5 class="card-title mb-0">Errores</h5>
                                        <p class="display-6 mb-0" id="statsErrors">0</p>
                                        <small id="cookieErrorsCount" class="text-warning"></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Estado de proceso -->
                <div class="card bg-dark border-secondary mb-3" id="processingCard" style="display: none;">
                    <div class="card-body">
                        <div class="d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border text-primary me-3" role="status"></div>
                                <div class="flex-grow-1">
                                    <h5 class="mb-1">Verificando tarjetas</h5>
                                    <div class="progress" style="height: 5px;">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                             id="processProgress" style="width: 0%"></div>
                                    </div>
                                </div>
                            </div>
                            <button type="button" class="btn btn-danger ms-3" id="stopBtn">
                                <i class="bi bi-stop-circle"></i> Detener
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Alerta de cookie error -->
                <div class="alert alert-warning alert-dismissible fade show" role="alert" id="cookieErrorAlert" style="display: none;">
                    <strong><i class="bi bi-exclamation-triangle"></i> Error de cookie detectado!</strong>
                    <span id="cookieErrorMessage">Una o más cookies pueden estar inválidas.</span>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>

                <!-- Tabs para resultados -->
                <div class="card bg-dark border-secondary">
                    <div class="card-header bg-dark border-secondary d-flex align-items-center">
                        <ul class="nav nav-tabs card-header-tabs" id="resultsTabs">
                            <li class="nav-item">
                                <a class="nav-link active bg-dark text-success" data-bs-toggle="tab" href="#approved">
                                    <i class="bi bi-check-circle"></i> Aprovadas
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link bg-dark text-danger" data-bs-toggle="tab" href="#declined">
                                    <i class="bi bi-x-circle"></i> Reprovadas
                                </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link bg-dark text-warning" data-bs-toggle="tab" href="#errors">
                                    <i class="bi bi-exclamation-triangle"></i> Errores
                                </a>
                            </li>
                        </ul>
                        <div class="ms-auto">
                            <button type="button" class="btn btn-sm btn-success" id="downloadApprovedBtn">
                                <i class="bi bi-download"></i> Descargar Aprovadas
                            </button>
                        </div>
                    </div>
                    <div class="card-body bg-dark">
                        <div class="tab-content">
                            <!-- Tarjetas Aprovadas -->
                            <div class="tab-pane fade show active" id="approved">
                                <div class="overflow-auto" style="max-height: 400px;">
                                    <div id="approvedResults"></div>
                                </div>
                            </div>
                            
                            <!-- Tarjetas Reprovadas -->
                            <div class="tab-pane fade" id="declined">
                                <div class="overflow-auto" style="max-height: 400px;">
                                    <div id="declinedResults"></div>
                                </div>
                            </div>
                            
                            <!-- Errores -->
                            <div class="tab-pane fade" id="errors">
                                <div class="overflow-auto" style="max-height: 400px;">
                                    <div id="errorsResults"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <p>Hecho por tanetus - por fans para fans- ola yonkis</p>
    </footer>

    <!-- Efectos de sonido (todos ocultos) -->
    <audio id="startSound" preload="auto">
        <source src="./SSLogon.wav" type="audio/mpeg">
    </audio>
    
    <audio id="approvedSound" preload="auto">
        <source src="./live.wav" type="audio/mpeg">
    </audio>
    
    <audio id="cookieErrorSound" preload="auto">
        <source src="./SSDing.wav" type="audio/mpeg">
    </audio>
    
    <audio id="clearSound" preload="auto">
        <source src="./SSRecycle.wav" type="audio/mpeg">
    </audio>
    
    <audio id="modeChangeSound" preload="auto">
        <source src="./SSBlip2.wav" type="audio/mpeg">
    </audio>
    
    <audio id="stopSound" preload="auto">
        <source src="./SSLogoff.wav" type="audio/mpeg">
    </audio>

    <!-- Bootstrap JavaScript y jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <script>
        $(document).ready(function() {
            let eventSource, currentSessionId;
            let cookieErrorCount = 0;
            let resultsCache = {
                approved: [],
                declined: [],
                errors: []
            };
            
            // Función para reproducir sonidos
            function playSound(soundId) {
                try {
                    const sound = document.getElementById(soundId);
                    sound.currentTime = 0; // Reiniciar el audio
                    sound.play().catch(e => console.log('Error al reproducir sonido:', e));
                } catch (e) {
                    console.error('Error con el sonido:', e);
                }
            }
            
            // Manejar selección de modo desde el overlay
            $('.mode-selector-btn').click(function() {
                const mode = $(this).data('mode');
                playSound('modeChangeSound');
                
                // Configurar el modo seleccionado
                $(`#mode${mode}`).prop('checked', true).trigger('change');
                
                // Ocultar overlay con animación
                $('#modeSelectorOverlay').animate({
                    opacity: 0
                }, 500, function() {
                    $(this).hide();
                    // Mostrar contenido principal con animación
                    $('#mainContent').css('opacity', '1');
                });
            });
            
            // Configurar cambio de modo y mostrar/ocultar campos
            $('input[name="opMode"]').change(function() {
                playSound('modeChangeSound');
                const mode = parseInt($(this).val());
                $('.cookie-field').each(function() {
                    const minMode = parseInt($(this).data('min-mode'));
                    const shouldShow = mode >= minMode;
                    $(this).toggle(shouldShow);
                    
                    // Habilitar/deshabilitar campos según el modo
                    const input = $(this).find('input');
                    if (shouldShow) {
                        input.prop('disabled', false)
                            .removeClass('disabled-field')
                            .attr('placeholder', $(this).find('label').text().replace(' (', ''));
                    } else {
                        input.prop('disabled', true)
                            .addClass('disabled-field')
                            .val('')
                            .attr('placeholder', 'No requerido en este modo');
                    }
                });
            });
            
            // Conteo de tarjetas
            $('#cardList').on('input', function() {
                const allCards = $(this).val().trim().split('\n').filter(card => card.trim());
                const uniqueCards = [...new Set(allCards)];
                $('#cardCount').text(`${allCards.length} tarjetas ingresadas (${uniqueCards.length} únicas)`);
            });

            // Limpiar formulario y resultados
            $('#clearBtn').click(function() {
                playSound('clearSound');
                $('#cardList').val('');
                $('#cardCount').text('0 tarjetas ingresadas (0 únicas)');
                clearResults();
            });

            function clearResults() {
                $('#approvedResults, #declinedResults, #errorsResults').empty();
                updateStats(0, 0, 0, 0);
                $('#processProgress').css('width', '0%');
                cookieErrorCount = 0;
                $('#cookieErrorsCount').text('');
                $('#cookieErrorAlert').hide();
                
                // Limpiar cache
                resultsCache = {
                    approved: [],
                    declined: [],
                    errors: []
                };
            }

            function updateStats(approved, declined, errors, cookieErrors) {
                $('#statsTotal').text(approved + declined + errors);
                $('#statsApproved').text(approved);
                $('#statsDenied').text(declined);
                $('#statsErrors').text(errors);
                
                if (cookieErrors > 0) {
                    $('#cookieErrorsCount').text(`(${cookieErrors} de cookie)`);
                } else {
                    $('#cookieErrorsCount').text('');
                }
            }

            function setupEventSource() {
                if (eventSource) eventSource.close();
                
                eventSource = new EventSource('/stream');
                
                eventSource.onmessage = function(event) {
                    try {
                        const data = JSON.parse(event.data);
                        
                        if (!currentSessionId || data.sessionId === currentSessionId) {
                            if (data.type === 'result') {
                                addResult(data.data);
                                updateStats(
                                    data.stats.aprovadas, 
                                    data.stats.reprovadas, 
                                    data.stats.errors,
                                    data.stats.cookieErrors || 0
                                );
                                if (data.progress) $('#processProgress').css('width', data.progress + '%');
                                highlightTab(data.data.status);
                                
                                // Reproducir sonido si es aprovada
                                if (data.data.status === 'aprovada') {
                                    playSound('approvedSound');
                                }
                            } else if (data.type === 'complete') {
                                $('#processingCard').hide();
                                updateStats(
                                    data.stats.aprovadas, 
                                    data.stats.reprovadas, 
                                    data.stats.errors,
                                    data.stats.cookieErrors || 0
                                );
                                alert('¡Procesamiento completado!');
                                playSound('stopSound');
                            } else if (data.type === 'error') {
                                alert('Error: ' + data.message);
                                $('#processingCard').hide();
                            } else if (data.type === 'cookie-error') {
                                playSound('cookieErrorSound');
                                cookieErrorCount++;
                                showCookieErrorAlert(data.data);
                            } else if (data.type === 'stopped') {
                                
                                $('#processingCard').hide();
                                alert('Procesamiento detenido por el usuario');
                                playSound('stopSound');
                            }
                        }
                    } catch (e) {
                        console.error('Error al procesar evento SSE:', e);
                    }
                };
                
                eventSource.onerror = function() {
                    console.log('Error en SSE, reconectando en 5 segundos...');
                    setTimeout(setupEventSource, 5000);
                };
            }
            
            function showCookieErrorAlert(data) {
                let cookieNum = data ? `Cookie ${data.cookieUsed}` : 'Una cookie';
                $('#cookieErrorMessage').text(`${cookieNum} parece estar inválida o expirada.`);
                $('#cookieErrorAlert').show();
            }
            
            function addResult(result) {
                const backupBadge = result.wasBackup ? 
                    '<span class="badge bg-warning ms-1">Respaldo</span>' : '';
                
                let statusBadge, cardClass;
                if (result.status === 'aprovada') {
                    statusBadge = '<span class="badge approved-badge">APROBADA</span>';
                    cardClass = 'approved-card';
                } else if (result.status === 'reprovada') {
                    statusBadge = '<span class="badge declined-badge">RECHAZADA</span>';
                    cardClass = 'declined-card';
                } else if (result.status === 'cookie-error') {
                    statusBadge = '<span class="badge error-badge">ERROR COOKIE</span>';
                    cardClass = 'error-card';
                } else {
                    statusBadge = '<span class="badge error-badge">ERROR</span>';
                    cardClass = 'error-card';
                }
                
                // Crear botón de copiar
                const copyBtn = `<button class="btn btn-sm btn-outline-light copy-btn" data-card="${result.card.replace(/"/g, '&quot;')}">
                    <i class="bi bi-copy"></i> Copiar
                </button>`;
                
                const card = `
                    <div class="card bg-dark ${cardClass} mb-2">
                        <div class="card-body py-2">
                            <div class="d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">${result.card}</h6>
                                <div>
                                    ${statusBadge}
                                    <span class="badge bg-secondary ms-1">Cookie ${result.cookieUsed}</span>
                                    ${backupBadge}
                                    ${copyBtn}
                                </div>
                            </div>
                            <p class="mb-0 text-light-emphasis small">${result.message}</p>
                        </div>
                    </div>
                `;
                
                // Almacenar en caché
                if (result.status === 'aprovada') {
                    resultsCache.approved.unshift(card);
                    $('#approvedResults').prepend(card);
                } else if (result.status === 'reprovada') {
                    resultsCache.declined.unshift(card);
                    $('#declinedResults').prepend(card);
                } else {
                    resultsCache.errors.unshift(card);
                    $('#errorsResults').prepend(card);
                }
                
                // Configurar evento click para los botones de copiar
                $('.copy-btn').off('click').on('click', function() {
                    const cardNumber = $(this).data('card');
                    navigator.clipboard.writeText(cardNumber).then(() => {
                        $(this).html('<i class="bi bi-check"></i> Copiado');
                        setTimeout(() => {
                            $(this).html('<i class="bi bi-copy"></i> Copiar');
                        }, 2000);
                    });
                });
            }
            
            // Función para renderizar resultados desde caché
            function renderCachedResults() {
                $('#approvedResults').html(resultsCache.approved.join(''));
                $('#declinedResults').html(resultsCache.declined.join(''));
                $('#errorsResults').html(resultsCache.errors.join(''));
                
                // Actualizar estadísticas basadas en el caché
                const approvedCount = resultsCache.approved.length;
                const declinedCount = resultsCache.declined.length;
                const errorsCount = resultsCache.errors.length;
                updateStats(approvedCount, declinedCount, errorsCount, 0);
                
                // Configurar eventos click para los botones de copiar
                $('.copy-btn').off('click').on('click', function() {
                    const cardNumber = $(this).data('card');
                    navigator.clipboard.writeText(cardNumber).then(() => {
                        $(this).html('<i class="bi bi-check"></i> Copiado');
                        setTimeout(() => {
                            $(this).html('<i class="bi bi-copy"></i> Copiar');
                        }, 2000);
                    });
                });
            }
            
            function highlightTab(status) {
                const tabMap = {
                    'aprovada': '#resultsTabs a[href="#approved"]',
                    'reprovada': '#resultsTabs a[href="#declined"]',
                    'error': '#resultsTabs a[href="#errors"]',
                    'cookie-error': '#resultsTabs a[href="#errors"]'
                };
                
                const tab = $(tabMap[status]);
                if (!$(`#${status === 'aprovada' ? 'approved' : status === 'reprovada' ? 'declined' : 'errors'}`).hasClass('show')) {
                    tab.addClass('fw-bold');
                    tab.find('i').addClass('pulsate');
                }
            }
            
            $('#resultsTabs a').on('shown.bs.tab', function() {
                $(this).removeClass('fw-bold');
                $(this).find('i').removeClass('pulsate');
            });

            // Descargar tarjetas aprobadas
            $('#downloadApprovedBtn').click(function() {
                const approvedCards = $('#approvedResults .card h6').map(function() {
                    return $(this).text().trim();
                }).get().join('\n');

                if (!approvedCards) {
                    alert('No hay tarjetas aprobadas para descargar');
                    return;
                }

                const blob = new Blob([approvedCards], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'tarjetas_aprobadas.txt';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            });
            
            // Detener procesamiento
            $('#stopBtn').click(function() {
                if (!currentSessionId) return;
                playSound('stopSound');
                
                $.ajax({
                    url: '/stop',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ sessionId: currentSessionId }),
                    success: function(response) {
                        console.log('Procesamiento detenido:', response);
                    },
                    error: function(xhr) {
                        console.error('Error al detener procesamiento:', xhr.responseJSON?.error);
                    }
                });
            });

            $('#checkForm').submit(function(e) {
                e.preventDefault();
                playSound('startSound');
                
                const cards = $('#cardList').val().trim().split('\n').filter(card => card.trim());
                if (!cards.length) {
                    alert('Ingrese al menos una tarjeta para verificar');
                    return;
                }

                const cookie1 = $('#cookie1').val().trim();
                if (!cookie1) {
                    alert('La Cookie 1 es obligatoria');
                    return;
                }

                const mode = parseInt($('input[name="opMode"]:checked').val());
                
                // Validaciones adicionales según el modo
                if (mode >= 2 && !$('#cookie2').val().trim()) {
                    alert('La Cookie 2 es requerida para el modo seleccionado');
                    return;
                }
                
                if (mode >= 3) {
                    if (!$('#cookie3').val().trim()) {
                        alert('La Cookie 3 es requerida para el modo Extremo');
                        return;
                    }
                    if (!$('#cookie4').val().trim()) {
                        alert('La Cookie 4 es requerida para el modo Extremo');
                        return;
                    }
                }
                
                // No limpiar resultados, solo mostrar la barra de progreso
                $('#processingCard').show();
                
                $.ajax({
                    url: '/check',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        cards: cards,
                        cookie1: cookie1,
                        cookie2: mode >= 2 ? $('#cookie2').val().trim() : '',
                        cookie3: mode >= 3 ? $('#cookie3').val().trim() : '',
                        cookie4: mode >= 3 ? $('#cookie4').val().trim() : '',
                        mode: mode
                    }),
                    success: function(response) {
                        currentSessionId = response.sessionId;
                        console.log('Procesamiento iniciado, ID de sesión:', currentSessionId);
                    },
                    error: function(xhr) {
                        alert('Error: ' + (xhr.responseJSON?.error || 'No se pudo procesar la solicitud'));
                        $('#processingCard').hide();
                    }
                });
            });
            
            // Renderizar resultados almacenados al cargar la página
            renderCachedResults();
            setupEventSource();
        });
    </script>
</body>
</html>